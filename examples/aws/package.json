{
  "name": "@tsed/basic-example",
  "version": "1.0.0",
  "description": "Here an example to configure your server with AWS",
  "main": "lambda.js",
  "config": {
    "s3BucketName": "YOUR_UNIQUE_BUCKET_NAME",
    "region": "YOUR_AWS_REGION",
    "cloudFormationStackName": "AwsServerlessExpressStack",
    "functionName": "YOUR_SERVERLESS_EXPRESS_LAMBDA_FUNCTION_NAME",
    "accountId": "YOUR_ACCOUNT_ID"
  },
  "scripts": {
    "clean": "rimraf '{src,test}/**/*.{js,js.map}'",
    "build": "npm run tsc",
    "test": "npm run clean && npm run test:lint && npm run test:coverage",
    "test:unit": "cross-env NODE_ENV=test mocha",
    "test:coverage": "cross-env NODE_ENV=test nyc mocha",
    "test:lint": "tslint --project tsconfig.json",
    "test:lint:fix": "tslint --project tsconfig.json --fix",
    "travis:deploy-once": "travis-deploy-once",
    "travis:coveralls": "nyc report --reporter=text-lcov | coveralls",
    "tsc": "tsc --project tsconfig.json",
    "tsc:w": "tsc --project tsconfig.json -w",
    "start:dev": "nodemon --watch \"src/**/*.ts\" --ignore \"node_modules/**/*\" --exec ts-node src/index.ts",
    "start": "ts-node src/index.ts",
    "start:prod": "npm run build && cross-env NODE_ENV=production node dist/index.js",
    "config": "node ./scripts/aws/configure.js",
    "deconfig": "node ./scripts/aws/deconfigure.js",
    "invoke-lambda": "aws lambda invoke --function-name $npm_package_config_functionName --region $npm_package_config_region --payload file://api-gateway-event.json lambda-invoke-response.json && cat lambda-invoke-response.json",
    "create-bucket": "aws s3 mb s3://$npm_package_config_s3BucketName --region $npm_package_config_region",
    "delete-bucket": "aws s3 rb s3://$npm_package_config_s3BucketName --region $npm_package_config_region",
    "package": "aws cloudformation package --template ./cloudformation.yaml --s3-bucket $npm_package_config_s3BucketName --output-template packaged-sam.yaml --region $npm_package_config_region",
    "deploy": "aws cloudformation deploy --template-file packaged-sam.yaml --stack-name $npm_package_config_cloudFormationStackName --capabilities CAPABILITY_IAM --region $npm_package_config_region",
    "package-deploy": "npm run package && npm run deploy",
    "delete-stack": "aws cloudformation delete-stack --stack-name $npm_package_config_cloudFormationStackName --region $npm_package_config_region",
    "setup": "npm install && (aws s3api get-bucket-location --bucket $npm_package_config_s3BucketName --region $npm_package_config_region || npm run create-bucket) && npm run package-deploy"
  },
  "author": "",
  "license": "MIT",
  "dependencies": {
    "@tsed/common": "5.59.2",
    "@tsed/core": "5.65.7",
    "@tsed/di": "5.59.2",
    "@tsed/exceptions": "5.59.2",
    "@tsed/swagger": "5.59.2",
    "@tsed/platform-express": "5.59.2",
    "@tsed/testing": "5.59.2",
    "@types/swagger-schema-official": "2.0.20",
    "@types/aws-serverless-express": "3.3.1",
    "aws-serverless-express": "3.3.6",
    "body-parser": "1.19.0",
    "compression": "1.7.4",
    "concurrently": "5.1.0",
    "cors": "2.8.5",
    "cookie-parser": "1.4.4",
    "express": "4.17.1",
    "method-override": "^3.0.0",
    "node-uuid": "^1.4.8",
    "ts-json-properties": "2.0.3"
  },
  "devDependencies": {
    "@types/chai": "4.2.10",
    "@types/chai-as-promised": "7.1.2",
    "@types/express": "4.17.3",
    "@types/http-proxy": "^1.16.2",
    "@types/mocha": "7.0.2",
    "@types/node": "13.9.1",
    "@types/request-promise": "^4.1.41",
    "@types/sinon": "7.5.2",
    "@types/sinon-chai": "3.2.3",
    "@types/supertest": "2.0.8",
    "chai": "4.2.0",
    "chai-as-promised": "^7.1.1",
    "cross-env": "7.0.2",
    "mocha": "7.1.0",
    "nodemon": "^1.17.5",
    "nyc": "15.0.0",
    "rimraf": "^2.6.2",
    "sinon": "9.0.1",
    "sinon-chai": "3.5.0",
    "supertest": "^4.0.2",
    "ts-node": "8.6.2",
    "tslint": "6.1.0",
    "typescript": "3.8.3"
  }
}